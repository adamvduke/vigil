// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: vigil.proto

package vigilpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Watcher_AddWatch_FullMethodName     = "/proto.Watcher/AddWatch"
	Watcher_WatchedPaths_FullMethodName = "/proto.Watcher/WatchedPaths"
)

// WatcherClient is the client API for Watcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatcherClient interface {
	AddWatch(ctx context.Context, in *AddWatchRequest, opts ...grpc.CallOption) (*AddWatchReply, error)
	WatchedPaths(ctx context.Context, in *WatchedPathsRequest, opts ...grpc.CallOption) (*WatchedPathsReply, error)
}

type watcherClient struct {
	cc grpc.ClientConnInterface
}

func NewWatcherClient(cc grpc.ClientConnInterface) WatcherClient {
	return &watcherClient{cc}
}

func (c *watcherClient) AddWatch(ctx context.Context, in *AddWatchRequest, opts ...grpc.CallOption) (*AddWatchReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddWatchReply)
	err := c.cc.Invoke(ctx, Watcher_AddWatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherClient) WatchedPaths(ctx context.Context, in *WatchedPathsRequest, opts ...grpc.CallOption) (*WatchedPathsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WatchedPathsReply)
	err := c.cc.Invoke(ctx, Watcher_WatchedPaths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatcherServer is the server API for Watcher service.
// All implementations must embed UnimplementedWatcherServer
// for forward compatibility.
type WatcherServer interface {
	AddWatch(context.Context, *AddWatchRequest) (*AddWatchReply, error)
	WatchedPaths(context.Context, *WatchedPathsRequest) (*WatchedPathsReply, error)
	mustEmbedUnimplementedWatcherServer()
}

// UnimplementedWatcherServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWatcherServer struct{}

func (UnimplementedWatcherServer) AddWatch(context.Context, *AddWatchRequest) (*AddWatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWatch not implemented")
}
func (UnimplementedWatcherServer) WatchedPaths(context.Context, *WatchedPathsRequest) (*WatchedPathsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchedPaths not implemented")
}
func (UnimplementedWatcherServer) mustEmbedUnimplementedWatcherServer() {}
func (UnimplementedWatcherServer) testEmbeddedByValue()                 {}

// UnsafeWatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatcherServer will
// result in compilation errors.
type UnsafeWatcherServer interface {
	mustEmbedUnimplementedWatcherServer()
}

func RegisterWatcherServer(s grpc.ServiceRegistrar, srv WatcherServer) {
	// If the following call pancis, it indicates UnimplementedWatcherServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Watcher_ServiceDesc, srv)
}

func _Watcher_AddWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherServer).AddWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Watcher_AddWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherServer).AddWatch(ctx, req.(*AddWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watcher_WatchedPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchedPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherServer).WatchedPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Watcher_WatchedPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherServer).WatchedPaths(ctx, req.(*WatchedPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Watcher_ServiceDesc is the grpc.ServiceDesc for Watcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Watcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Watcher",
	HandlerType: (*WatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWatch",
			Handler:    _Watcher_AddWatch_Handler,
		},
		{
			MethodName: "WatchedPaths",
			Handler:    _Watcher_WatchedPaths_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vigil.proto",
}
